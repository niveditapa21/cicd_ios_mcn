name: GHCR - Install SD-Core 5G

on:
  workflow_dispatch:
    inputs:
      deployment_server:
        description: "The IP address of the server to deploy to"
        required: true
        default: "52.23.210.174"
      port:
        description: "The port to deploy the application on (between 8000 and 9000)"
        required: true
        default: "8080"
      branch_name:
        description: "The Git branch to build from"
        required: true
        default: "main"
      run_basic_env:
        description: "Run Basic Environment Check"
        required: true
        default: true
      run_file_ops:
        description: "Run File Operations Test"
        required: true
        default: false
      run_network_test:
        description: "Run Network Connectivity Test"
        required: true
        default: false
      run_build_sim:
        description: "Run Build Simulation"
        required: true
        default: false

jobs:
  trigger-and-check-jenkins:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Trigger Jenkins Parameterized Job
        run: |
          set -e
          JENKINS_URL="http://52.23.210.174:8080/"
          JOB_NAME="pipeline1"
          USERNAME="nive"
          TOKEN="11f5c648d7bdba8fa9502f4ec84db7680c"
          
          # Extract inputs from workflow dispatch
          RUN_BASIC_ENV=${{ github.event.inputs.run_basic_env }}
          RUN_FILE_OPS=${{ github.event.inputs.run_file_ops }}
          RUN_NETWORK_TEST=${{ github.event.inputs.run_network_test }}
          RUN_BUILD_SIM=${{ github.event.inputs.run_build_sim }}
          
          # Trigger Jenkins job with parameters
          TRIGGER_RESPONSE=$(curl -v -X POST -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/buildWithParameters?RUN_BASIC_ENV=$RUN_BASIC_ENV&RUN_FILE_OPS=$RUN_FILE_OPS&RUN_NETWORK_TEST=$RUN_NETWORK_TEST&RUN_BUILD_SIM=$RUN_BUILD_SIM" -i)
          
          # Check HTTP status code for success (201)
          HTTP_STATUS=$(echo "$TRIGGER_RESPONSE" | head -n 1 | awk '{print $2}')
          echo "Jenkins response status: $HTTP_STATUS"
          if [[ "$HTTP_STATUS" != "201" ]]; then
            echo "Error triggering Jenkins job. HTTP Status: $HTTP_STATUS"
            echo "Response: $TRIGGER_RESPONSE"
            exit 1
          fi
          
          # Extract queue URL from response
          QUEUE_URL=$(echo "$TRIGGER_RESPONSE" | grep -Fi Location | awk '{print $2}' | tr -d '\r')
          if [ -z "$QUEUE_URL" ]; then
            echo "Failed to trigger Jenkins job. Queue URL not found."
            exit 1
          fi
          echo "Triggered Jenkins job. Queue URL: $QUEUE_URL"
          echo "queue_url=$QUEUE_URL" >> $GITHUB_ENV

      - name: Wait for Jenkins Job to Start and Fetch Build Number
        id: fetch-build-number
        run: |
          set -e
          QUEUE_URL="${{ env.queue_url }}"
          USERNAME="nive"
          TOKEN="11f5c648d7bdba8fa9502f4ec84db7680c"
          echo "Polling Jenkins queue to fetch build number..."
          
          BUILD_NUMBER="null"
          for i in {1..30}; do
            BUILD_NUMBER=$(curl -s -u $USERNAME:$TOKEN "${QUEUE_URL}api/json" | jq -r '.executable.number')
            if [ "$BUILD_NUMBER" != "null" ]; then
              echo "Build number: $BUILD_NUMBER"
              break
            fi
            echo "Waiting for build to be scheduled... Attempt: $i"
            sleep 5
          done
          
          if [ "$BUILD_NUMBER" == "null" ]; then
            echo "Failed to retrieve build number after multiple attempts."
            exit 1
          fi
          
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV

      - name: Check Jenkins Job Status
        run: |
          set -e
          JENKINS_URL="http://52.23.210.174:8080/"
          JOB_NAME="pipeline1"
          BUILD_NUMBER="${{ env.build_number }}"
          USERNAME="nive"
          TOKEN="11f5c648d7bdba8fa9502f4ec84db7680c"
          echo "Checking Jenkins job status..."
          
          STATUS="null"
          for i in {1..60}; do
            BUILD_INFO=$(curl -s -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/api/json")
            STATUS=$(echo $BUILD_INFO | jq -r '.result')
            if [ "$STATUS" != "null" ]; then
              break
            fi
            echo "Waiting for build to complete... Attempt: $i"
            sleep 10
          done
          
          if [ "$STATUS" == "null" ]; then
            echo "Failed to fetch status after multiple attempts."
            exit 1
          fi
          
          echo "Job Status: $STATUS"
          
          if [ "$STATUS" == "FAILURE" ]; then
            BUILD_LOG=$(curl -s -u $USERNAME:$TOKEN "$JENKINS_URL/job/$JOB_NAME/$BUILD_NUMBER/consoleText" | tail -n 50)
            echo "Build failed. Logs: $BUILD_LOG"
            exit 1
          fi
          
          echo "Build completed successfully!"

      # Trigger testing after Jenkins job completes successfully
      - name: Trigger Testing Job (If applicable)
        run: |
          # Check if Jenkins job succeeded, then trigger testing
          if [ "$STATUS" == "SUCCESS" ]; then
            echo "Triggering tests..."
            # Trigger test job in Jenkins or any other required testing script
            # Example: Trigger Jenkins job for testing
            TEST_JOB_NAME="testing-job"  # Replace with actual testing job name
            TRIGGER_TEST_RESPONSE=$(curl -v -X POST -u $USERNAME:$TOKEN "$JENKINS_URL/job/$TEST_JOB_NAME/buildWithParameters?BUILD_NUMBER=$BUILD_NUMBER" -i)

            # Check HTTP status code for success (201)
            TEST_HTTP_STATUS=$(echo "$TRIGGER_TEST_RESPONSE" | head -n 1 | awk '{print $2}')
            if [[ "$TEST_HTTP_STATUS" != "201" ]]; then
              echo "Error triggering test job. HTTP Status: $TEST_HTTP_STATUS"
              exit 1
            fi
            echo "Test job triggered successfully!"
          else
            echo "Skipping tests as Jenkins job did not complete successfully."
          fi
